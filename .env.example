# =============================================================================
# ENVIRONMENT CONFIGURATION
# =============================================================================
# Copy this file to .env and fill in your actual values
# IMPORTANT: Never commit .env to version control!

# Application Environment
NODE_ENV="development"
PORT=3000

# =============================================================================
# APPLICATION URLs
# =============================================================================
# IMPORTANT: Use the same URL for both variables
# Development: http://localhost:3000
# Production: https://your-domain.vercel.app (NO trailing slash!)

NEXT_PUBLIC_BASE_URL=http://localhost:3000
BETTER_AUTH_URL=http://localhost:3000

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================
# ⚠️  CRITICAL: Always include a database name in your MongoDB URI!
# Without a database name, MongoDB will default to the 'test' database.
#
# Format: mongodb+srv://USERNAME:PASSWORD@CLUSTER/DATABASE_NAME?options
#
# Examples:
# Development: mongodb+srv://user:pass@cluster.mongodb.net/signalist_dev?retryWrites=true&w=majority
# Production:  mongodb+srv://user:pass@cluster.mongodb.net/signalist_prod?retryWrites=true&w=majority
#
# Get your connection string from MongoDB Atlas:
# 1. Go to Database → Connect → Connect your application
# 2. Copy the connection string
# 3. Replace <username>, <password>, and add your database name
# 4. Add database name before the ? query parameters

MONGODB_URI="mongodb+srv://username:password@cluster.mongodb.net/DATABASE_NAME?retryWrites=true&w=majority&appName=Cluster0"

# =============================================================================
# AUTHENTICATION
# =============================================================================
# Generate a secure secret with: openssl rand -base64 32
# Use different secrets for development and production!

BETTER_AUTH_SECRET="your_secret_here_generate_with_openssl_rand_base64_32"

# =============================================================================
# EMAIL CONFIGURATION (Gmail SMTP)
# =============================================================================
# IMPORTANT: Use Gmail App Password, NOT your regular Gmail password!
#
# How to get Gmail App Password:
# 1. Enable 2-Factor Authentication on your Gmail account
# 2. Go to https://myaccount.google.com/apppasswords
# 3. Generate a new app password for "Mail"
# 4. Use the 16-character password below (remove spaces)

NODEMAILER_EMAIL="your_email@gmail.com"
NODEMAILER_PASSWORD="your_16_character_app_password"

# =============================================================================
# API KEYS
# =============================================================================

# Stock Market API (Required)
# Get your free API key from https://finnhub.io/
NEXT_PUBLIC_FINNHUB_API_KEY="your_finnhub_api_key"

# AI Features (Optional)
# Get your API key from https://ai.google.dev/
GEMINI_API_KEY="your_gemini_api_key"

# Event Processing (Optional)
# Get your event key from https://www.inngest.com/
INNGEST_EVENT_KEY="your_inngest_event_key"

# =============================================================================
# NOTES
# =============================================================================
#
# Development vs Production:
# ---------------------------
# Development (NODE_ENV=development):
# - Email verification is disabled (auto sign-in)
# - Password reset URLs are logged to console
# - Uses NEXT_PUBLIC_BASE_URL for base URL
#
# Production (NODE_ENV=production):
# - Email verification is required
# - Emails are sent via Nodemailer
# - Uses BETTER_AUTH_URL for base URL
# - Set BETTER_AUTH_URL to your production domain!
#
# Better Auth Collections:
# ------------------------
# Better Auth uses SINGULAR collection names:
# - user (not users)
# - account (not accounts)
# - session (not sessions)
# - verification (not verifications)
#
# These collections are created automatically in your database.
#
# Database Best Practices:
# ------------------------
# 1. Use separate databases for development and production
# 2. Always include database name in MONGODB_URI
# 3. Test connection with: npm run test:db
# 4. List collections with: npx tsx scripts/list-collections.ts
# 5. Clear users (dev only): npm run db:clear-users
